{"ast":null,"code":"import { GLOBALTYPES } from \"./globalTypes\";\nimport { postDataAPI, getDataAPI } from \"../../utils/fetchData\";\nexport const ANANOM_MESSAGE_TYPES = {\n  ADD_ANANOM_MESSAGE: \"ADD_ANANOM_MESSAGE\",\n  GET_ANANOM_CONVERSATIONS: \"GET_ANANOM_CONVERSATIONS\",\n  GET_ANANOM_MESSAGES: \"GET_ANANOM_MESSAGES\"\n};\nexport const addMessage = ({\n  message\n}) => async dispatch => {\n  dispatch({\n    type: ANANOM_MESSAGE_TYPES.ADD_ANANOM_MESSAGE,\n    payload: message\n  });\n};\nexport const getConversations = ({\n  auth,\n  page = 1\n}) => async dispatch => {\n  try {\n    const res = await getDataAPI(`ananomconversations?limit=${page * 9}`, auth.token);\n    console.log(res);\n    let newArr = [];\n    res.data.ananomconversations.forEach(item => {\n      // item.recipients.forEach((cv) => {\n      //   if (cv._id !== auth.user._id) {\n      newArr.push({\n        text: item.text,\n        media: item.media,\n        messages: item.messages,\n        id: item._id\n      }); //   }\n      // });\n    });\n    dispatch({\n      type: ANANOM_MESSAGE_TYPES.GET_ANANOM_CONVERSATIONS,\n      payload: {\n        newArr,\n        result: res.data.result\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getMessages = () => async dispatch => {\n  dispatch({\n    type: ANANOM_MESSAGE_TYPES.GET_ANANOM_MESSAGES\n  }); // } catch (err) {\n  //   dispatch({\n  //     type: GLOBALTYPES.ALERT,\n  //     payload: { error: err.response.data.msg },\n  //   });\n  // }\n};","map":{"version":3,"sources":["C:/Users/ayush/Desktop/sonewms/client/src/redux/actions/saveConversation.js"],"names":["GLOBALTYPES","postDataAPI","getDataAPI","ANANOM_MESSAGE_TYPES","ADD_ANANOM_MESSAGE","GET_ANANOM_CONVERSATIONS","GET_ANANOM_MESSAGES","addMessage","message","dispatch","type","payload","getConversations","auth","page","res","token","console","log","newArr","data","ananomconversations","forEach","item","push","text","media","messages","id","_id","result","err","ALERT","error","response","msg","getMessages"],"mappings":"AAAA,SAASA,WAAT,QAA4B,eAA5B;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,uBAAxC;AAEA,OAAO,MAAMC,oBAAoB,GAAG;AAClCC,EAAAA,kBAAkB,EAAE,oBADc;AAElCC,EAAAA,wBAAwB,EAAE,0BAFQ;AAGlCC,EAAAA,mBAAmB,EAAE;AAHa,CAA7B;AAMP,OAAO,MAAMC,UAAU,GACrB,CAAC;AAAEC,EAAAA;AAAF,CAAD,KACA,MAAOC,QAAP,IAAoB;AAClBA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEP,oBAAoB,CAACC,kBAA7B;AAAiDO,IAAAA,OAAO,EAAEH;AAA1D,GAAD,CAAR;AACD,CAJI;AAMP,OAAO,MAAMI,gBAAgB,GAC3B,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,IAAI,GAAG;AAAf,CAAD,KACA,MAAOL,QAAP,IAAoB;AAClB,MAAI;AACF,UAAMM,GAAG,GAAG,MAAMb,UAAU,CACzB,6BAA4BY,IAAI,GAAG,CAAE,EADZ,EAE1BD,IAAI,CAACG,KAFqB,CAA5B;AAIAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA,QAAII,MAAM,GAAG,EAAb;AACAJ,IAAAA,GAAG,CAACK,IAAJ,CAASC,mBAAT,CAA6BC,OAA7B,CAAsCC,IAAD,IAAU;AAC7C;AACA;AACIJ,MAAAA,MAAM,CAACK,IAAP,CAAY;AAACC,QAAAA,IAAI,EAAEF,IAAI,CAACE,IAAZ;AAAkBC,QAAAA,KAAK,EAAEH,IAAI,CAACG,KAA9B;AAAqCC,QAAAA,QAAQ,EAAEJ,IAAI,CAACI,QAApD;AAA6DC,QAAAA,EAAE,EAACL,IAAI,CAACM;AAArE,OAAZ,EAHyC,CAI7C;AACA;AACD,KAND;AAQApB,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEP,oBAAoB,CAACE,wBADpB;AAEPM,MAAAA,OAAO,EAAE;AAAEQ,QAAAA,MAAF;AAAUW,QAAAA,MAAM,EAAEf,GAAG,CAACK,IAAJ,CAASU;AAA3B;AAFF,KAAD,CAAR;AAID,GAnBD,CAmBE,OAAOC,GAAP,EAAY;AACZtB,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEV,WAAW,CAACgC,KADX;AAEPrB,MAAAA,OAAO,EAAE;AAAEsB,QAAAA,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAad,IAAb,CAAkBe;AAA3B;AAFF,KAAD,CAAR;AAID;AACF,CA5BI;AA8BP,OAAO,MAAMC,WAAW,GACtB,MACA,MAAO3B,QAAP,IAAoB;AAEhBA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEP,oBAAoB,CAACG;AAA7B,GAAD,CAAR,CAFgB,CAGlB;AACA;AACA;AACA;AACA;AACA;AACD,CAXI","sourcesContent":["import { GLOBALTYPES } from \"./globalTypes\";\r\nimport { postDataAPI, getDataAPI } from \"../../utils/fetchData\";\r\n\r\nexport const ANANOM_MESSAGE_TYPES = {\r\n  ADD_ANANOM_MESSAGE: \"ADD_ANANOM_MESSAGE\",\r\n  GET_ANANOM_CONVERSATIONS: \"GET_ANANOM_CONVERSATIONS\",\r\n  GET_ANANOM_MESSAGES: \"GET_ANANOM_MESSAGES\",\r\n};\r\n\r\nexport const addMessage =\r\n  ({ message}) =>\r\n  async (dispatch) => {\r\n    dispatch({ type: ANANOM_MESSAGE_TYPES.ADD_ANANOM_MESSAGE, payload: message });\r\n  };\r\n\r\nexport const getConversations =\r\n  ({ auth, page = 1 }) =>\r\n  async (dispatch) => {\r\n    try {\r\n      const res = await getDataAPI(\r\n        `ananomconversations?limit=${page * 9}`,\r\n        auth.token\r\n      );\r\n      console.log(res);\r\n      let newArr = [];\r\n      res.data.ananomconversations.forEach((item) => {\r\n        // item.recipients.forEach((cv) => {\r\n        //   if (cv._id !== auth.user._id) {\r\n            newArr.push({text: item.text, media: item.media, messages: item.messages,id:item._id });\r\n        //   }\r\n        // });\r\n      });\r\n\r\n      dispatch({\r\n        type: ANANOM_MESSAGE_TYPES.GET_ANANOM_CONVERSATIONS,\r\n        payload: { newArr, result: res.data.result },\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n\r\nexport const getMessages =\r\n  () =>\r\n  async (dispatch) => {\r\n\r\n      dispatch({ type: ANANOM_MESSAGE_TYPES.GET_ANANOM_MESSAGES });\r\n    // } catch (err) {\r\n    //   dispatch({\r\n    //     type: GLOBALTYPES.ALERT,\r\n    //     payload: { error: err.response.data.msg },\r\n    //   });\r\n    // }\r\n  };"]},"metadata":{},"sourceType":"module"}