{"ast":null,"code":"import { GLOBALTYPES } from \"./globalTypes\";\nimport { postDataAPI, getDataAPI } from \"../../utils/fetchData\";\nimport { createNotify, removeNotify } from \"./notifyAction\";\nexport const REQUEST_TYPES = {\n  LOADING: \"LOADING_REQUESTS\",\n  CREATE_REQUEST: \"CREATE_REQUEST\",\n  ACCEPT_REQUEST: \"ACCEPT_REQUEST\",\n  REJECT_REQUEST: \"REJECT_REQUEST\",\n  GET_SENT_REQUESTS: \"GET_SENT_REQUESTS\",\n  GET_RECEIVED_REQUESTS: \"GET_RECEIVED_REQUESTS\",\n  GET_MATCH_REQUEST: \"GET_MATCH_REQUEST\"\n};\nexport const createRequest = ({\n  sender,\n  receiver,\n  user,\n  auth,\n  socket\n}) => async dispatch => {\n  if (user.matches.every(item => item._id !== receiver)) {\n    try {\n      await postDataAPI(\"createrequest\", {\n        sender,\n        receiver\n      }, auth.token);\n      dispatch({\n        type: REQUEST_TYPES.CREATE_REQUEST\n      });\n      socket.emit(\"requestmatch\", receiver);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  }\n};\nexport const getSentMatchRequests = ({\n  auth\n}) => async dispatch => {\n  try {\n    const res = await getDataAPI(`sentrequests`, auth.token);\n    let newArr = res.data.matchRequests;\n    dispatch({\n      type: REQUEST_TYPES.GET_SENT_REQUESTS,\n      payload: {\n        newArr,\n        result: res.data.result\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getReceivedMatchRequests = ({\n  auth\n}) => async dispatch => {\n  try {\n    const res = await getDataAPI(`receivedrequests`, auth.token);\n    let newArr = res.data.matchRequests;\n    dispatch({\n      type: REQUEST_TYPES.GET_RECEIVED_REQUESTS,\n      payload: {\n        newArr,\n        result: res.data.result\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const acceptMatchRequest = ({\n  auth,\n  socket,\n  sender,\n  receiver\n}) => async dispatch => {\n  let newUser; // if (users.every((item) => item._id !== user._id)) {\n  //   newUser = { ...user, matches: [...user.matches, auth.user] };\n  // } else {\n  //   users.forEach((item) => {\n  //     if (item._id === user._id) {\n  //       newUser = { ...item, matches: [...item.matches, auth.user] };\n  //     }\n  //   });\n  // }\n\n  dispatch({\n    type: GLOBALTYPES.AUTH,\n    payload: { ...auth,\n      user: { ...auth.user,\n        matches: [...auth.user.matches, sender]\n      }\n    }\n  });\n\n  try {\n    const res = await postDataAPI(`/acceptrequest`, {\n      sender,\n      receiver\n    }, auth.token); // todo socket\n\n    socket.emit(\"makematch\", sender, receiver); // todo notification\n\n    const msg = {\n      id: auth.user._id,\n      text: \"is now a match with you\",\n      recipients: [newUser._id],\n      url: `/profile/${auth.user._id}`\n    };\n    dispatch(createNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const rejectMatchRequest = ({\n  sender,\n  receiver,\n  auth,\n  socket\n}) => async dispatch => {\n  try {\n    const res = await postDataAPI(`/rejectrequest`, {\n      sender,\n      receiver\n    }, auth.token);\n    socket.emit(\"rejectmatch\", sender, receiver);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/ayush/Desktop/myProjects/mern-social-media-master/client/src/redux/actions/matchRequestAction.js"],"names":["GLOBALTYPES","postDataAPI","getDataAPI","createNotify","removeNotify","REQUEST_TYPES","LOADING","CREATE_REQUEST","ACCEPT_REQUEST","REJECT_REQUEST","GET_SENT_REQUESTS","GET_RECEIVED_REQUESTS","GET_MATCH_REQUEST","createRequest","sender","receiver","user","auth","socket","dispatch","matches","every","item","_id","token","type","emit","err","ALERT","payload","error","response","data","msg","getSentMatchRequests","res","newArr","matchRequests","result","getReceivedMatchRequests","acceptMatchRequest","newUser","AUTH","id","text","recipients","url","rejectMatchRequest"],"mappings":"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","sourcesContent":["import { GLOBALTYPES } from \"./globalTypes\";\r\nimport { postDataAPI, getDataAPI } from \"../../utils/fetchData\";\r\nimport { createNotify, removeNotify } from \"./notifyAction\";\r\n\r\nexport const REQUEST_TYPES = {\r\n  LOADING: \"LOADING_REQUESTS\",\r\n  CREATE_REQUEST: \"CREATE_REQUEST\",\r\n  ACCEPT_REQUEST: \"ACCEPT_REQUEST\",\r\n  REJECT_REQUEST: \"REJECT_REQUEST\",\r\n  GET_SENT_REQUESTS: \"GET_SENT_REQUESTS\",\r\n  GET_RECEIVED_REQUESTS: \"GET_RECEIVED_REQUESTS\",\r\n  GET_MATCH_REQUEST: \"GET_MATCH_REQUEST\",\r\n};\r\n\r\nexport const createRequest =\r\n  ({ sender, receiver, user, auth, socket }) =>\r\n  async (dispatch) => {\r\n    if (user.matches.every((item) => item._id !== receiver)) {\r\n      try {\r\n          await postDataAPI(\"createrequest\", { sender, receiver }, auth.token);\r\n          dispatch({\r\n            type: REQUEST_TYPES.CREATE_REQUEST,\r\n          });\r\n          socket.emit(\"requestmatch\", receiver);\r\n      } catch (err) {\r\n        dispatch({\r\n          type: GLOBALTYPES.ALERT,\r\n          payload: { error: err.response.data.msg },\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\nexport const getSentMatchRequests =\r\n  ({ auth}) =>\r\n  async (dispatch) => {\r\n    try {\r\n      const res = await getDataAPI(\r\n        `sentrequests`,\r\n        auth.token\r\n      );\r\n      let newArr = res.data.matchRequests;\r\n      dispatch({\r\n        type: REQUEST_TYPES.GET_SENT_REQUESTS,\r\n        payload: { newArr, result: res.data.result },\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n\r\nexport const getReceivedMatchRequests =\r\n  ({ auth}) =>\r\n  async (dispatch) => {\r\n    try {\r\n      const res = await getDataAPI(\r\n        `receivedrequests`,\r\n        auth.token\r\n      );\r\n      let newArr = res.data.matchRequests;\r\n      dispatch({\r\n        type: REQUEST_TYPES.GET_RECEIVED_REQUESTS,\r\n        payload: { newArr, result: res.data.result },\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n\r\nexport const acceptMatchRequest =\r\n  ({ auth, socket, sender, receiver }) =>\r\n  async (dispatch) => {\r\n    let newUser;\r\n    // if (users.every((item) => item._id !== user._id)) {\r\n    //   newUser = { ...user, matches: [...user.matches, auth.user] };\r\n    // } else {\r\n    //   users.forEach((item) => {\r\n    //     if (item._id === user._id) {\r\n    //       newUser = { ...item, matches: [...item.matches, auth.user] };\r\n    //     }\r\n    //   });\r\n    // }\r\n\r\n    dispatch({\r\n      type: GLOBALTYPES.AUTH,\r\n      payload: {\r\n        ...auth,\r\n        user: { ...auth.user, matches: [...auth.user.matches, sender] },\r\n      },\r\n    });\r\n\r\n    try {\r\n      const res = await postDataAPI(\r\n        `/acceptrequest`,\r\n        {sender, receiver},\r\n        auth.token\r\n      );\r\n      // todo socket\r\n      socket.emit(\"makematch\", sender, receiver);\r\n\r\n      // todo notification\r\n      const msg = {\r\n        id: auth.user._id,\r\n        text: \"is now a match with you\",\r\n        recipients: [newUser._id],\r\n        url: `/profile/${auth.user._id}`,\r\n      };\r\n\r\n      dispatch(createNotify({ msg, auth, socket }));\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n\r\nexport const rejectMatchRequest =\r\n  ({ sender, receiver, auth, socket }) =>\r\n  async (dispatch) => {\r\n    try {\r\n      const res = await postDataAPI(`/rejectrequest`, { sender, receiver }, auth.token);\r\n      socket.emit(\"rejectmatch\", sender, receiver);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };"]},"metadata":{},"sourceType":"module"}