{"ast":null,"code":"import { GLOBALTYPES } from \"./globalTypes\";\nimport { postDataAPI, getDataAPI } from \"../../utils/fetchData\";\nimport { createNotify, removeNotify } from \"./notifyAction\";\nexport const REQUEST_TYPES = {\n  LOADING: \"LOADING_REQUESTS\",\n  CREATE_REQUEST: \"CREATE_REQUEST\",\n  ACCEPT_REQUEST: \"ACCEPT_REQUEST\",\n  REJECT_REQUEST: \"REJECT_REQUEST\",\n  GET_SENT_REQUESTS: \"GET_SENT_REQUESTS\",\n  GET_RECEIVED_REQUESTS: \"GET_RECEIVED_REQUESTS\",\n  GET_MATCH_REQUEST: \"GET_MATCH_REQUEST\"\n};\nexport const createRequest = ({\n  sender,\n  receiver,\n  user,\n  auth,\n  socket\n}) => async dispatch => {\n  if (user.matches.every(item => item._id !== receiver)) {\n    try {\n      await postDataAPI(\"createrequest\", {\n        sender,\n        receiver\n      }, auth.token);\n      dispatch({\n        type: REQUEST_TYPES.CREATE_REQUEST\n      });\n      socket.emit(\"requestmatch\", sender);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  }\n};\nexport const getSentMatchRequests = ({\n  auth,\n  page = 1\n}) => async dispatch => {\n  try {\n    const res = await getDataAPI(`sentrequests`, auth.token);\n    let newArr = res.data.matchRequests;\n    dispatch({\n      type: REQUEST_TYPES.GET_SENT_REQUESTS,\n      payload: {\n        newArr,\n        result: res.data.result\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getReceivedMatchRequests = ({\n  auth\n}) => async dispatch => {\n  try {\n    const res = await getDataAPI(`receivedrequests`, auth.token);\n    let newArr = res.data.matchRequests;\n    dispatch({\n      type: REQUEST_TYPES.GET_RECEIVED_REQUESTS,\n      payload: {\n        newArr,\n        result: res.data.result\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const acceptMatchRequest = ({\n  users,\n  user,\n  auth,\n  socket,\n  id\n}) => async dispatch => {\n  let newUser;\n\n  if (users.every(item => item._id !== user._id)) {\n    newUser = { ...user,\n      matches: [...user.matches, auth.user]\n    };\n  } else {\n    users.forEach(item => {\n      if (item._id === user._id) {\n        newUser = { ...item,\n          matches: [...item.matches, auth.user]\n        };\n      }\n    });\n  }\n\n  dispatch({\n    type: REQUEST_TYPES.ACCEPT_REQUEST,\n    payload: newUser\n  });\n  dispatch({\n    type: GLOBALTYPES.AUTH,\n    payload: { ...auth,\n      user: { ...auth.user,\n        matches: [...auth.user.matches, newUser]\n      }\n    }\n  });\n\n  try {\n    const res = await postDataAPI(`/acceptrequest`, {\n      id\n    }, auth.token); // todo socket\n\n    socket.emit(\"makematch\", newUser); // todo notification\n\n    const msg = {\n      id: auth.user._id,\n      text: \"is now a match with you\",\n      recipients: [newUser._id],\n      url: `/profile/${auth.user._id}`\n    };\n    dispatch(createNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const rejectMatchRequest = ({\n  id,\n  auth,\n  socket\n}) => async dispatch => {\n  try {\n    const res = await postDataAPI(`/rejectrequest`, {\n      id\n    }, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/ayush/Desktop/myProjects/mern-social-media-master/client/src/redux/actions/matchRequestAction.js"],"names":["GLOBALTYPES","postDataAPI","getDataAPI","createNotify","removeNotify","REQUEST_TYPES","LOADING","CREATE_REQUEST","ACCEPT_REQUEST","REJECT_REQUEST","GET_SENT_REQUESTS","GET_RECEIVED_REQUESTS","GET_MATCH_REQUEST","createRequest","sender","receiver","user","auth","socket","dispatch","matches","every","item","_id","token","type","emit","err","ALERT","payload","error","response","data","msg","getSentMatchRequests","page","res","newArr","matchRequests","result","getReceivedMatchRequests","acceptMatchRequest","users","id","newUser","forEach","AUTH","text","recipients","url","rejectMatchRequest"],"mappings":"AAAA,SAASA,WAAT,QAA4B,eAA5B;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,uBAAxC;AACA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,gBAA3C;AAEA,OAAO,MAAMC,aAAa,GAAG;AAC3BC,EAAAA,OAAO,EAAE,kBADkB;AAE3BC,EAAAA,cAAc,EAAE,gBAFW;AAG3BC,EAAAA,cAAc,EAAE,gBAHW;AAI3BC,EAAAA,cAAc,EAAE,gBAJW;AAK3BC,EAAAA,iBAAiB,EAAE,mBALQ;AAM3BC,EAAAA,qBAAqB,EAAE,uBANI;AAO3BC,EAAAA,iBAAiB,EAAE;AAPQ,CAAtB;AAUP,OAAO,MAAMC,aAAa,GACxB,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,QAAV;AAAoBC,EAAAA,IAApB;AAA0BC,EAAAA,IAA1B;AAAgCC,EAAAA;AAAhC,CAAD,KACA,MAAOC,QAAP,IAAoB;AAClB,MAAIH,IAAI,CAACI,OAAL,CAAaC,KAAb,CAAoBC,IAAD,IAAUA,IAAI,CAACC,GAAL,KAAaR,QAA1C,CAAJ,EAAyD;AACvD,QAAI;AACA,YAAMd,WAAW,CAAC,eAAD,EAAkB;AAAEa,QAAAA,MAAF;AAAUC,QAAAA;AAAV,OAAlB,EAAwCE,IAAI,CAACO,KAA7C,CAAjB;AACAL,MAAAA,QAAQ,CAAC;AACPM,QAAAA,IAAI,EAAEpB,aAAa,CAACE;AADb,OAAD,CAAR;AAGAW,MAAAA,MAAM,CAACQ,IAAP,CAAY,cAAZ,EAA4BZ,MAA5B;AACH,KAND,CAME,OAAOa,GAAP,EAAY;AACZR,MAAAA,QAAQ,CAAC;AACPM,QAAAA,IAAI,EAAEzB,WAAW,CAAC4B,KADX;AAEPC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,KAAK,EAAEH,GAAG,CAACI,QAAJ,CAAaC,IAAb,CAAkBC;AAA3B;AAFF,OAAD,CAAR;AAID;AACF;AACF,CAjBI;AAmBP,OAAO,MAAMC,oBAAoB,GAC/B,CAAC;AAAEjB,EAAAA,IAAF;AAAQkB,EAAAA,IAAI,GAAG;AAAf,CAAD,KACA,MAAOhB,QAAP,IAAoB;AAClB,MAAI;AACF,UAAMiB,GAAG,GAAG,MAAMlC,UAAU,CACzB,cADyB,EAE1Be,IAAI,CAACO,KAFqB,CAA5B;AAIA,QAAIa,MAAM,GAAGD,GAAG,CAACJ,IAAJ,CAASM,aAAtB;AACAnB,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEpB,aAAa,CAACK,iBADb;AAEPmB,MAAAA,OAAO,EAAE;AAAEQ,QAAAA,MAAF;AAAUE,QAAAA,MAAM,EAAEH,GAAG,CAACJ,IAAJ,CAASO;AAA3B;AAFF,KAAD,CAAR;AAID,GAVD,CAUE,OAAOZ,GAAP,EAAY;AACZR,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEzB,WAAW,CAAC4B,KADX;AAEPC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,KAAK,EAAEH,GAAG,CAACI,QAAJ,CAAaC,IAAb,CAAkBC;AAA3B;AAFF,KAAD,CAAR;AAID;AACF,CAnBI;AAqBP,OAAO,MAAMO,wBAAwB,GACnC,CAAC;AAAEvB,EAAAA;AAAF,CAAD,KACA,MAAOE,QAAP,IAAoB;AAClB,MAAI;AACF,UAAMiB,GAAG,GAAG,MAAMlC,UAAU,CACzB,kBADyB,EAE1Be,IAAI,CAACO,KAFqB,CAA5B;AAIA,QAAIa,MAAM,GAAGD,GAAG,CAACJ,IAAJ,CAASM,aAAtB;AACAnB,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEpB,aAAa,CAACM,qBADb;AAEPkB,MAAAA,OAAO,EAAE;AAAEQ,QAAAA,MAAF;AAAUE,QAAAA,MAAM,EAAEH,GAAG,CAACJ,IAAJ,CAASO;AAA3B;AAFF,KAAD,CAAR;AAID,GAVD,CAUE,OAAOZ,GAAP,EAAY;AACZR,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEzB,WAAW,CAAC4B,KADX;AAEPC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,KAAK,EAAEH,GAAG,CAACI,QAAJ,CAAaC,IAAb,CAAkBC;AAA3B;AAFF,KAAD,CAAR;AAID;AACF,CAnBI;AAqBP,OAAO,MAAMQ,kBAAkB,GAC7B,CAAC;AAAEC,EAAAA,KAAF;AAAS1B,EAAAA,IAAT;AAAeC,EAAAA,IAAf;AAAqBC,EAAAA,MAArB;AAA6ByB,EAAAA;AAA7B,CAAD,KACA,MAAOxB,QAAP,IAAoB;AAClB,MAAIyB,OAAJ;;AACA,MAAIF,KAAK,CAACrB,KAAN,CAAaC,IAAD,IAAUA,IAAI,CAACC,GAAL,KAAaP,IAAI,CAACO,GAAxC,CAAJ,EAAkD;AAChDqB,IAAAA,OAAO,GAAG,EAAE,GAAG5B,IAAL;AAAWI,MAAAA,OAAO,EAAE,CAAC,GAAGJ,IAAI,CAACI,OAAT,EAAkBH,IAAI,CAACD,IAAvB;AAApB,KAAV;AACD,GAFD,MAEO;AACL0B,IAAAA,KAAK,CAACG,OAAN,CAAevB,IAAD,IAAU;AACtB,UAAIA,IAAI,CAACC,GAAL,KAAaP,IAAI,CAACO,GAAtB,EAA2B;AACzBqB,QAAAA,OAAO,GAAG,EAAE,GAAGtB,IAAL;AAAWF,UAAAA,OAAO,EAAE,CAAC,GAAGE,IAAI,CAACF,OAAT,EAAkBH,IAAI,CAACD,IAAvB;AAApB,SAAV;AACD;AACF,KAJD;AAKD;;AAEDG,EAAAA,QAAQ,CAAC;AAAEM,IAAAA,IAAI,EAAEpB,aAAa,CAACG,cAAtB;AAAsCqB,IAAAA,OAAO,EAAEe;AAA/C,GAAD,CAAR;AAEAzB,EAAAA,QAAQ,CAAC;AACPM,IAAAA,IAAI,EAAEzB,WAAW,CAAC8C,IADX;AAEPjB,IAAAA,OAAO,EAAE,EACP,GAAGZ,IADI;AAEPD,MAAAA,IAAI,EAAE,EAAE,GAAGC,IAAI,CAACD,IAAV;AAAgBI,QAAAA,OAAO,EAAE,CAAC,GAAGH,IAAI,CAACD,IAAL,CAAUI,OAAd,EAAuBwB,OAAvB;AAAzB;AAFC;AAFF,GAAD,CAAR;;AAQA,MAAI;AACF,UAAMR,GAAG,GAAG,MAAMnC,WAAW,CAC1B,gBAD0B,EAE3B;AAAC0C,MAAAA;AAAD,KAF2B,EAG3B1B,IAAI,CAACO,KAHsB,CAA7B,CADE,CAMF;;AACAN,IAAAA,MAAM,CAACQ,IAAP,CAAY,WAAZ,EAAyBkB,OAAzB,EAPE,CASF;;AACA,UAAMX,GAAG,GAAG;AACVU,MAAAA,EAAE,EAAE1B,IAAI,CAACD,IAAL,CAAUO,GADJ;AAEVwB,MAAAA,IAAI,EAAE,yBAFI;AAGVC,MAAAA,UAAU,EAAE,CAACJ,OAAO,CAACrB,GAAT,CAHF;AAIV0B,MAAAA,GAAG,EAAG,YAAWhC,IAAI,CAACD,IAAL,CAAUO,GAAI;AAJrB,KAAZ;AAOAJ,IAAAA,QAAQ,CAAChB,YAAY,CAAC;AAAE8B,MAAAA,GAAF;AAAOhB,MAAAA,IAAP;AAAaC,MAAAA;AAAb,KAAD,CAAb,CAAR;AACD,GAlBD,CAkBE,OAAOS,GAAP,EAAY;AACZR,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEzB,WAAW,CAAC4B,KADX;AAEPC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,KAAK,EAAEH,GAAG,CAACI,QAAJ,CAAaC,IAAb,CAAkBC;AAA3B;AAFF,KAAD,CAAR;AAID;AACF,CAhDI;AAkDP,OAAO,MAAMiB,kBAAkB,GAC7B,CAAC;AAAEP,EAAAA,EAAF;AAAM1B,EAAAA,IAAN;AAAYC,EAAAA;AAAZ,CAAD,KACA,MAAOC,QAAP,IAAoB;AAClB,MAAI;AACF,UAAMiB,GAAG,GAAG,MAAMnC,WAAW,CAAE,gBAAF,EAAmB;AAAE0C,MAAAA;AAAF,KAAnB,EAA2B1B,IAAI,CAACO,KAAhC,CAA7B;AACD,GAFD,CAEE,OAAOG,GAAP,EAAY;AACZR,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEzB,WAAW,CAAC4B,KADX;AAEPC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,KAAK,EAAEH,GAAG,CAACI,QAAJ,CAAaC,IAAb,CAAkBC;AAA3B;AAFF,KAAD,CAAR;AAID;AACF,CAXI","sourcesContent":["import { GLOBALTYPES } from \"./globalTypes\";\r\nimport { postDataAPI, getDataAPI } from \"../../utils/fetchData\";\r\nimport { createNotify, removeNotify } from \"./notifyAction\";\r\n\r\nexport const REQUEST_TYPES = {\r\n  LOADING: \"LOADING_REQUESTS\",\r\n  CREATE_REQUEST: \"CREATE_REQUEST\",\r\n  ACCEPT_REQUEST: \"ACCEPT_REQUEST\",\r\n  REJECT_REQUEST: \"REJECT_REQUEST\",\r\n  GET_SENT_REQUESTS: \"GET_SENT_REQUESTS\",\r\n  GET_RECEIVED_REQUESTS: \"GET_RECEIVED_REQUESTS\",\r\n  GET_MATCH_REQUEST: \"GET_MATCH_REQUEST\",\r\n};\r\n\r\nexport const createRequest =\r\n  ({ sender, receiver, user, auth, socket }) =>\r\n  async (dispatch) => {\r\n    if (user.matches.every((item) => item._id !== receiver)) {\r\n      try {\r\n          await postDataAPI(\"createrequest\", { sender, receiver }, auth.token);\r\n          dispatch({\r\n            type: REQUEST_TYPES.CREATE_REQUEST,\r\n          });\r\n          socket.emit(\"requestmatch\", sender);\r\n      } catch (err) {\r\n        dispatch({\r\n          type: GLOBALTYPES.ALERT,\r\n          payload: { error: err.response.data.msg },\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\nexport const getSentMatchRequests =\r\n  ({ auth, page = 1 }) =>\r\n  async (dispatch) => {\r\n    try {\r\n      const res = await getDataAPI(\r\n        `sentrequests`,\r\n        auth.token\r\n      );\r\n      let newArr = res.data.matchRequests;\r\n      dispatch({\r\n        type: REQUEST_TYPES.GET_SENT_REQUESTS,\r\n        payload: { newArr, result: res.data.result },\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n\r\nexport const getReceivedMatchRequests =\r\n  ({ auth}) =>\r\n  async (dispatch) => {\r\n    try {\r\n      const res = await getDataAPI(\r\n        `receivedrequests`,\r\n        auth.token\r\n      );\r\n      let newArr = res.data.matchRequests;\r\n      dispatch({\r\n        type: REQUEST_TYPES.GET_RECEIVED_REQUESTS,\r\n        payload: { newArr, result: res.data.result },\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n\r\nexport const acceptMatchRequest =\r\n  ({ users, user, auth, socket, id }) =>\r\n  async (dispatch) => {\r\n    let newUser;\r\n    if (users.every((item) => item._id !== user._id)) {\r\n      newUser = { ...user, matches: [...user.matches, auth.user] };\r\n    } else {\r\n      users.forEach((item) => {\r\n        if (item._id === user._id) {\r\n          newUser = { ...item, matches: [...item.matches, auth.user] };\r\n        }\r\n      });\r\n    }\r\n\r\n    dispatch({ type: REQUEST_TYPES.ACCEPT_REQUEST, payload: newUser });\r\n\r\n    dispatch({\r\n      type: GLOBALTYPES.AUTH,\r\n      payload: {\r\n        ...auth,\r\n        user: { ...auth.user, matches: [...auth.user.matches, newUser] },\r\n      },\r\n    });\r\n\r\n    try {\r\n      const res = await postDataAPI(\r\n        `/acceptrequest`,\r\n        {id},\r\n        auth.token\r\n      );\r\n      // todo socket\r\n      socket.emit(\"makematch\", newUser);\r\n\r\n      // todo notification\r\n      const msg = {\r\n        id: auth.user._id,\r\n        text: \"is now a match with you\",\r\n        recipients: [newUser._id],\r\n        url: `/profile/${auth.user._id}`,\r\n      };\r\n\r\n      dispatch(createNotify({ msg, auth, socket }));\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n\r\nexport const rejectMatchRequest =\r\n  ({ id, auth, socket }) =>\r\n  async (dispatch) => {\r\n    try {\r\n      const res = await postDataAPI(`/rejectrequest`, { id }, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };"]},"metadata":{},"sourceType":"module"}