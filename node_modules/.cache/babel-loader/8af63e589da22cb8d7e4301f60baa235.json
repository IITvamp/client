{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/ayush/Desktop/myProjects/mern-social-media-master/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/ayush/Desktop/myProjects/mern-social-media-master/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{GLOBALTYPES}from\"./globalTypes\";import{postDataAPI,getDataAPI}from\"../../utils/fetchData\";export var ANANOM_MESSAGE_TYPES={ADD_ANANOM_MESSAGE:\"ADD_ANANOM_MESSAGE\",GET_ANANOM_CONVERSATIONS:\"GET_ANANOM_CONVERSATIONS\",GET_ANANOM_MESSAGES:\"GET_ANANOM_MESSAGES\"};export var addMessage=function addMessage(_ref){var message=_ref.message;return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch({type:ANANOM_MESSAGE_TYPES.ADD_ANANOM_MESSAGE,payload:message});case 1:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref2.apply(this,arguments);};}();};export var getConversations=function getConversations(_ref3){var auth=_ref3.auth,_ref3$page=_ref3.page,page=_ref3$page===void 0?1:_ref3$page;return/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){var res,newArr;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return getDataAPI(\"ananomconversations?limit=\".concat(page*9),auth.token);case 3:res=_context2.sent;console.log(res);newArr=[];res.data.ananomconversations.forEach(function(item){// item.recipients.forEach((cv) => {\n//   if (cv._id !== auth.user._id) {\nnewArr.push({text:item.text,media:item.media,messages:item.messages,id:item._id});//   }\n// });\n});dispatch({type:ANANOM_MESSAGE_TYPES.GET_ANANOM_CONVERSATIONS,payload:{newArr:newArr,result:res.data.result}});_context2.next=13;break;case 10:_context2.prev=10;_context2.t0=_context2[\"catch\"](0);dispatch({type:GLOBALTYPES.ALERT,payload:{error:_context2.t0.response.data.msg}});case 13:case\"end\":return _context2.stop();}}},_callee2,null,[[0,10]]);}));return function(_x2){return _ref4.apply(this,arguments);};}();};export var getMessages=function getMessages(){return/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:dispatch({type:ANANOM_MESSAGE_TYPES.GET_ANANOM_MESSAGES});// } catch (err) {\n//   dispatch({\n//     type: GLOBALTYPES.ALERT,\n//     payload: { error: err.response.data.msg },\n//   });\n// }\ncase 1:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x3){return _ref5.apply(this,arguments);};}();};","map":{"version":3,"sources":["C:/Users/ayush/Desktop/myProjects/mern-social-media-master/client/src/redux/actions/saveConversation.js"],"names":["GLOBALTYPES","postDataAPI","getDataAPI","ANANOM_MESSAGE_TYPES","ADD_ANANOM_MESSAGE","GET_ANANOM_CONVERSATIONS","GET_ANANOM_MESSAGES","addMessage","message","dispatch","type","payload","getConversations","auth","page","token","res","console","log","newArr","data","ananomconversations","forEach","item","push","text","media","messages","id","_id","result","ALERT","error","response","msg","getMessages"],"mappings":"6WAAA,OAASA,WAAT,KAA4B,eAA5B,CACA,OAASC,WAAT,CAAsBC,UAAtB,KAAwC,uBAAxC,CAEA,MAAO,IAAMC,CAAAA,oBAAoB,CAAG,CAClCC,kBAAkB,CAAE,oBADc,CAElCC,wBAAwB,CAAE,0BAFQ,CAGlCC,mBAAmB,CAAE,qBAHa,CAA7B,CAMP,MAAO,IAAMC,CAAAA,UAAU,CACrB,QADWA,CAAAA,UACX,UAAGC,CAAAA,OAAH,MAAGA,OAAH,iGACA,iBAAOC,QAAP,kHACEA,QAAQ,CAAC,CAAEC,IAAI,CAAEP,oBAAoB,CAACC,kBAA7B,CAAiDO,OAAO,CAAEH,OAA1D,CAAD,CAAR,CADF,sDADA,iEADK,CAMP,MAAO,IAAMI,CAAAA,gBAAgB,CAC3B,QADWA,CAAAA,gBACX,WAAGC,CAAAA,IAAH,OAAGA,IAAH,kBAASC,IAAT,CAASA,IAAT,qBAAgB,CAAhB,4GACA,kBAAOL,QAAP,6KAEsBP,CAAAA,UAAU,qCACGY,IAAI,CAAG,CADV,EAE1BD,IAAI,CAACE,KAFqB,CAFhC,QAEUC,GAFV,gBAMIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,EACIG,MAPR,CAOiB,EAPjB,CAQIH,GAAG,CAACI,IAAJ,CAASC,mBAAT,CAA6BC,OAA7B,CAAqC,SAACC,IAAD,CAAU,CAC7C;AACA;AACIJ,MAAM,CAACK,IAAP,CAAY,CAACC,IAAI,CAAEF,IAAI,CAACE,IAAZ,CAAkBC,KAAK,CAAEH,IAAI,CAACG,KAA9B,CAAqCC,QAAQ,CAAEJ,IAAI,CAACI,QAApD,CAA6DC,EAAE,CAACL,IAAI,CAACM,GAArE,CAAZ,EACJ;AACA;AACD,CAND,EAQApB,QAAQ,CAAC,CACPC,IAAI,CAAEP,oBAAoB,CAACE,wBADpB,CAEPM,OAAO,CAAE,CAAEQ,MAAM,CAANA,MAAF,CAAUW,MAAM,CAAEd,GAAG,CAACI,IAAJ,CAASU,MAA3B,CAFF,CAAD,CAAR,CAhBJ,qFAqBIrB,QAAQ,CAAC,CACPC,IAAI,CAAEV,WAAW,CAAC+B,KADX,CAEPpB,OAAO,CAAE,CAAEqB,KAAK,CAAE,aAAIC,QAAJ,CAAab,IAAb,CAAkBc,GAA3B,CAFF,CAAD,CAAR,CArBJ,uEADA,kEADK,CA8BP,MAAO,IAAMC,CAAAA,WAAW,CACtB,QADWA,CAAAA,WACX,mGACA,kBAAO1B,QAAP,sHAEIA,QAAQ,CAAC,CAAEC,IAAI,CAAEP,oBAAoB,CAACG,mBAA7B,CAAD,CAAR,CACF;AACA;AACA;AACA;AACA;AACA;AARF,wDADA,kEADK","sourcesContent":["import { GLOBALTYPES } from \"./globalTypes\";\r\nimport { postDataAPI, getDataAPI } from \"../../utils/fetchData\";\r\n\r\nexport const ANANOM_MESSAGE_TYPES = {\r\n  ADD_ANANOM_MESSAGE: \"ADD_ANANOM_MESSAGE\",\r\n  GET_ANANOM_CONVERSATIONS: \"GET_ANANOM_CONVERSATIONS\",\r\n  GET_ANANOM_MESSAGES: \"GET_ANANOM_MESSAGES\",\r\n};\r\n\r\nexport const addMessage =\r\n  ({ message}) =>\r\n  async (dispatch) => {\r\n    dispatch({ type: ANANOM_MESSAGE_TYPES.ADD_ANANOM_MESSAGE, payload: message });\r\n  };\r\n\r\nexport const getConversations =\r\n  ({ auth, page = 1 }) =>\r\n  async (dispatch) => {\r\n    try {\r\n      const res = await getDataAPI(\r\n        `ananomconversations?limit=${page * 9}`,\r\n        auth.token\r\n      );\r\n      console.log(res);\r\n      let newArr = [];\r\n      res.data.ananomconversations.forEach((item) => {\r\n        // item.recipients.forEach((cv) => {\r\n        //   if (cv._id !== auth.user._id) {\r\n            newArr.push({text: item.text, media: item.media, messages: item.messages,id:item._id });\r\n        //   }\r\n        // });\r\n      });\r\n\r\n      dispatch({\r\n        type: ANANOM_MESSAGE_TYPES.GET_ANANOM_CONVERSATIONS,\r\n        payload: { newArr, result: res.data.result },\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n\r\nexport const getMessages =\r\n  () =>\r\n  async (dispatch) => {\r\n\r\n      dispatch({ type: ANANOM_MESSAGE_TYPES.GET_ANANOM_MESSAGES });\r\n    // } catch (err) {\r\n    //   dispatch({\r\n    //     type: GLOBALTYPES.ALERT,\r\n    //     payload: { error: err.response.data.msg },\r\n    //   });\r\n    // }\r\n  };"]},"metadata":{},"sourceType":"module"}