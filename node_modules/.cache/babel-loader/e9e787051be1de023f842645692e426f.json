{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ayush\\\\Desktop\\\\myProjects\\\\mern-social-media-master\\\\client\\\\src\\\\components\\\\AnanomousUser\\\\saveAnanomMessages\\\\RightSide.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\"; // import UserCard from \"../UserCard\";\n\nimport AnanomUserCard from \"./AnanomUserCard\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport MsgDisplay from \"../message/MsgDisplay\";\nimport AnanomMsgDisplay from \"./AnanomMsgDisplay\";\nimport Icons from \"../Icons\";\nimport { GLOBALTYPES } from \"../../redux/actions/globalTypes\";\nimport { imageShow, videoShow } from \"../../utils/mediaShow\";\nimport { imageUpload } from \"../../utils/imageUpload\";\nimport EndChatModel from \"./EndChatModel\";\nimport { addMessage, getMessages, MESSAGE_TYPES } from \"../../redux/actions/saveConversation\"; // import {\n//   addMessage,\n//   getMessages,\n//   MESSAGE_TYPES,\n// } from \"../../redux/actions/messageAction\";\n\nimport LoadIcon from \"../../images/loading.gif\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst AnanomUserChat = props => {\n  _s();\n\n  console.log(props); //   const googleId = props.receiverGoogleId;\n  //   const ananomConversation = props.ananomConversation;\n  //   const receieverSocketID = props.receieverSocketID;\n  //   const id = props.id;\n  //   const ownID = props.ownId;\n\n  const [messages, setMessages] = useState([]);\n  const {\n    auth,\n    theme\n  } = useSelector(state => state); //   const dispatch = useDispatch();\n  //   const [incomingMessage, setIncomingMessage] = useState(null);\n  //   const [text, setText] = useState(\"\");\n  //   const [page, setPage] = useState(0);\n  //   const [onEdit, setOnEdit] = useState(false);\n  //   const [media, setMedia] = useState([]);\n  //   const [loadMedia, setLoadMedia] = useState(false);\n\n  useEffect(() => {\n    setMessages(props.message);\n  }, []); //   const refDisplay = useRef();\n  //   const pageEnd = useRef();\n  //   useEffect(() => {\n  //     socket.on(\"getAnanomMessage\", (data) => {\n  //       console.log(data);\n  //       setIncomingMessage({\n  //         sender: data.sender,\n  //         receiverId: auth.user._id,\n  //         text: data.text,\n  //         media: data.media,\n  //         createdAt: data.createdAt,\n  //       });\n  //     });\n  //   }, [socket]);\n  //   console.log(incomingMessage);\n  //   useEffect(() => {\n  //     const addmessage = async () => {\n  //       if (incomingMessage) {\n  //         setMessages((prev) => [...prev, incomingMessage]);\n  //         await dispatch(addMessage({ message: incomingMessage }));\n  //       }\n  //     };\n  //     addmessage();\n  //   }, [incomingMessage]);\n  //   const handleChangeMedia = (e) => {\n  //     const files = [...e.target.files];\n  //     let err = \"\";\n  //     let newMedia = [];\n  //     files.forEach((file) => {\n  //       if (!file) {\n  //         return (err = \"File does not exist.\");\n  //       }\n  //       if (file.size > 1024 * 1024 * 5) {\n  //         return (err = \"Image size must be less than 5 mb.\");\n  //       }\n  //       return newMedia.push(file);\n  //     });\n  //     if (err) {\n  //       dispatch({ type: GLOBALTYPES.ALERT, payload: { error: err } });\n  //     }\n  //     setMedia([...media, ...newMedia]);\n  //   };\n  //   const handleDeleteMedia = (index) => {\n  //     const newArr = [...media];\n  //     newArr.splice(index, 1);\n  //     setMedia(newArr);\n  //   };\n  //   const handleSubmit = async (e) => {\n  //     e.preventDefault();\n  //     if (!text.trim() && media.length === 0) return;\n  //     setText(\"\");\n  //     setMedia([]);\n  //     setLoadMedia(true);\n  //     let newArr = [];\n  //     if (media.length > 0) newArr = await imageUpload(media);\n  //     let message = {\n  //       sender: auth.user._id,\n  //       receiverId: googleId,\n  //       text,\n  //       media: newArr,\n  //       createdAt: new Date().toISOString(),\n  //     };\n  //     console.log(ananomConversation);\n  //     console.log(ownID);\n  //     // ananomConversation?.members?.includes(ownID) &&\n  //     setMessages((prev) => [...prev, message]);\n  //     socket.emit(\"sendAnanomMessage\", message);\n  //     setLoadMedia(false);\n  //     await dispatch(addMessage({ message }));\n  //     if (refDisplay.current) {\n  //       refDisplay.current.scrollIntoView({\n  //         behaviour: \"smooth\",\n  //         block: \"end\",\n  //       });\n  //     }\n  //   };\n  //   useEffect(() => {\n  //     if (refDisplay.current) {\n  //       refDisplay.current.scrollIntoView({\n  //         behaviour: \"smooth\",\n  //         block: \"end\",\n  //       });\n  //     }\n  //   }, [text]);\n  //   useEffect(() => {\n  //     if (incomingMessage) {\n  //       refDisplay.current.scrollIntoView({\n  //         behaviour: \"smooth\",\n  //         block: \"end\",\n  //       });\n  //     }\n  //   }, [incomingMessage]);\n  //   console.log(googleId);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message_header\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat_container\",\n      style: {\n        height: \"calc(100% - 180px)\"\n      },\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [msg.sender !== auth.user._id && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat_row other_message\",\n          children: /*#__PURE__*/_jsxDEV(AnanomMsgDisplay, {\n            msg: msg,\n            theme: theme\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 17\n        }, this), msg.sender === auth.user._id && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat_row you_message\",\n          children: /*#__PURE__*/_jsxDEV(MsgDisplay, {\n            user: auth.user,\n            msg: msg,\n            theme: theme\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 17\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(AnanomUserChat, \"6CeLNOtptLf2BD1Go7q0XX+EE7k=\", false, function () {\n  return [useSelector];\n});\n\n_c = AnanomUserChat;\nexport default AnanomUserChat;\n\nvar _c;\n\n$RefreshReg$(_c, \"AnanomUserChat\");","map":{"version":3,"sources":["C:/Users/ayush/Desktop/myProjects/mern-social-media-master/client/src/components/AnanomousUser/saveAnanomMessages/RightSide.js"],"names":["React","useEffect","useState","useRef","AnanomUserCard","useDispatch","useSelector","useParams","ToastContainer","toast","MsgDisplay","AnanomMsgDisplay","Icons","GLOBALTYPES","imageShow","videoShow","imageUpload","EndChatModel","addMessage","getMessages","MESSAGE_TYPES","LoadIcon","AnanomUserChat","props","console","log","messages","setMessages","auth","theme","state","message","height","map","msg","index","sender","user","_id"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\n// import UserCard from \"../UserCard\";\r\nimport AnanomUserCard from \"./AnanomUserCard\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport MsgDisplay from \"../message/MsgDisplay\";\r\nimport AnanomMsgDisplay from \"./AnanomMsgDisplay\";\r\nimport Icons from \"../Icons\";\r\nimport { GLOBALTYPES } from \"../../redux/actions/globalTypes\";\r\nimport { imageShow, videoShow } from \"../../utils/mediaShow\";\r\nimport { imageUpload } from \"../../utils/imageUpload\";\r\nimport EndChatModel from \"./EndChatModel\";\r\nimport {\r\n  addMessage,\r\n  getMessages,\r\n  MESSAGE_TYPES,\r\n} from \"../../redux/actions/saveConversation\";\r\n\r\n// import {\r\n//   addMessage,\r\n//   getMessages,\r\n//   MESSAGE_TYPES,\r\n// } from \"../../redux/actions/messageAction\";\r\nimport LoadIcon from \"../../images/loading.gif\";\r\n\r\nconst AnanomUserChat = (props) => {\r\n  console.log(props);\r\n//   const googleId = props.receiverGoogleId;\r\n//   const ananomConversation = props.ananomConversation;\r\n//   const receieverSocketID = props.receieverSocketID;\r\n//   const id = props.id;\r\n//   const ownID = props.ownId;\r\n  const [messages, setMessages] = useState([]);\r\n  const { auth, theme } = useSelector((state) => state);\r\n//   const dispatch = useDispatch();\r\n//   const [incomingMessage, setIncomingMessage] = useState(null);\r\n//   const [text, setText] = useState(\"\");\r\n//   const [page, setPage] = useState(0);\r\n//   const [onEdit, setOnEdit] = useState(false);\r\n//   const [media, setMedia] = useState([]);\r\n//   const [loadMedia, setLoadMedia] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setMessages(props.message);\r\n    }, [])\r\n//   const refDisplay = useRef();\r\n//   const pageEnd = useRef();\r\n\r\n//   useEffect(() => {\r\n//     socket.on(\"getAnanomMessage\", (data) => {\r\n//       console.log(data);\r\n//       setIncomingMessage({\r\n//         sender: data.sender,\r\n//         receiverId: auth.user._id,\r\n//         text: data.text,\r\n//         media: data.media,\r\n//         createdAt: data.createdAt,\r\n//       });\r\n//     });\r\n//   }, [socket]);\r\n\r\n//   console.log(incomingMessage);\r\n\r\n//   useEffect(() => {\r\n//     const addmessage = async () => {\r\n//       if (incomingMessage) {\r\n//         setMessages((prev) => [...prev, incomingMessage]);\r\n//         await dispatch(addMessage({ message: incomingMessage }));\r\n//       }\r\n//     };\r\n//     addmessage();\r\n//   }, [incomingMessage]);\r\n\r\n//   const handleChangeMedia = (e) => {\r\n//     const files = [...e.target.files];\r\n//     let err = \"\";\r\n//     let newMedia = [];\r\n\r\n//     files.forEach((file) => {\r\n//       if (!file) {\r\n//         return (err = \"File does not exist.\");\r\n//       }\r\n//       if (file.size > 1024 * 1024 * 5) {\r\n//         return (err = \"Image size must be less than 5 mb.\");\r\n//       }\r\n//       return newMedia.push(file);\r\n//     });\r\n//     if (err) {\r\n//       dispatch({ type: GLOBALTYPES.ALERT, payload: { error: err } });\r\n//     }\r\n//     setMedia([...media, ...newMedia]);\r\n//   };\r\n\r\n//   const handleDeleteMedia = (index) => {\r\n//     const newArr = [...media];\r\n//     newArr.splice(index, 1);\r\n//     setMedia(newArr);\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     if (!text.trim() && media.length === 0) return;\r\n//     setText(\"\");\r\n//     setMedia([]);\r\n\r\n//     setLoadMedia(true);\r\n\r\n//     let newArr = [];\r\n//     if (media.length > 0) newArr = await imageUpload(media);\r\n\r\n//     let message = {\r\n//       sender: auth.user._id,\r\n//       receiverId: googleId,\r\n//       text,\r\n//       media: newArr,\r\n//       createdAt: new Date().toISOString(),\r\n//     };\r\n//     console.log(ananomConversation);\r\n//     console.log(ownID);\r\n//     // ananomConversation?.members?.includes(ownID) &&\r\n//     setMessages((prev) => [...prev, message]);\r\n//     socket.emit(\"sendAnanomMessage\", message);\r\n//     setLoadMedia(false);\r\n//     await dispatch(addMessage({ message }));\r\n//     if (refDisplay.current) {\r\n//       refDisplay.current.scrollIntoView({\r\n//         behaviour: \"smooth\",\r\n//         block: \"end\",\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     if (refDisplay.current) {\r\n//       refDisplay.current.scrollIntoView({\r\n//         behaviour: \"smooth\",\r\n//         block: \"end\",\r\n//       });\r\n//     }\r\n//   }, [text]);\r\n\r\n//   useEffect(() => {\r\n//     if (incomingMessage) {\r\n//       refDisplay.current.scrollIntoView({\r\n//         behaviour: \"smooth\",\r\n//         block: \"end\",\r\n//       });\r\n//     }\r\n//   }, [incomingMessage]);\r\n\r\n//   console.log(googleId);\r\n  return (\r\n    <>\r\n      <div className=\"message_header\">\r\n        {/* {user.length !== 0 && ( */}\r\n        {/* <AnanomUserCard\r\n          find={props.find}\r\n          setFind={props.setFind}\r\n          end={props.end}\r\n          setEnd={props.setEnd}\r\n          bcode={props.bcode}\r\n          setBcode={props.setBcode}\r\n          receiver={googleId}\r\n        >\r\n          <i className=\"fas fa-trash text-danger\" />\r\n        </AnanomUserCard> */}\r\n        {/* )} */}\r\n      </div>\r\n\r\n      <div className=\"chat_container\" style={{ height: \"calc(100% - 180px)\" }}>\r\n        {/* <div className=\"chat_display\" ref={refDisplay}> */}\r\n          {/* <button style={{ marginTop: \"-25px\", opacity: 0 }} ref={pageEnd}>\r\n            Load..\r\n          </button> */}\r\n\r\n          {messages.map((msg, index) => (\r\n            <div key={index}>\r\n              {msg.sender !== auth.user._id && (\r\n                <div className=\"chat_row other_message\">\r\n                  <AnanomMsgDisplay msg={msg} theme={theme} />\r\n                </div>\r\n              )}\r\n              {msg.sender === auth.user._id && (\r\n                <div className=\"chat_row you_message\">\r\n                  <MsgDisplay user={auth.user} msg={msg} theme={theme} />\r\n                </div>\r\n              )}\r\n            </div>\r\n          ))}\r\n          {/* {loadMedia && (\r\n            <div className=\"chat_row you_message\">\r\n              <img src={LoadIcon} alt=\"Loading...\" />\r\n            </div>\r\n          )} */}\r\n        {/* </div> */}\r\n      </div>\r\n\r\n      {/* <div\r\n        className=\"show_media\"\r\n        style={{ display: media.length > 0 ? \"\" : \"none\" }}\r\n      >\r\n        {media.map((item, index) => (\r\n          <div key={index} id=\"file_media\">\r\n            {item.type.match(/video/i)\r\n              ? videoShow(URL.createObjectURL(item), theme)\r\n              : imageShow(URL.createObjectURL(item), theme)}\r\n            <span onClick={() => handleDeleteMedia(index)}>&times;</span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <form className=\"chat_input\" onSubmit={handleSubmit}>\r\n        <input\r\n          placeholder=\"Type a message.\"\r\n          type=\"text\"\r\n          value={text}\r\n          onChange={(e) => setText(e.target.value)}\r\n          style={{\r\n            filter: theme ? \"invert(1)\" : \"invert(0)\",\r\n            background: theme ? \"#040404\" : \"\",\r\n            color: theme ? \"white\" : \"\",\r\n          }}\r\n        />\r\n        <Icons setContent={setText} content={text} theme={theme} />\r\n        <div className=\"file_upload\">\r\n          <i className=\"fas fa-image color-c1\" />\r\n          <input\r\n            type=\"file\"\r\n            name=\"file\"\r\n            id=\"file\"\r\n            multiple\r\n            accept=\"image/*,video/*\"\r\n            onChange={handleChangeMedia}\r\n          />\r\n        </div>\r\n        <button\r\n          type=\"submit\"\r\n          disabled={text || media.length > 0 ? false : true}\r\n          className=\"material-icons\"\r\n        >\r\n          near_me\r\n        </button>\r\n      </form>\r\n\r\n      {onEdit && (\r\n        <EndChatModel setOnEdit={setOnEdit} receiver={props.receiver} />\r\n      )} */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AnanomUserChat;\r\n"]},"metadata":{},"sourceType":"module"}