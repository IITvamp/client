{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/ayush/Desktop/myProjects/mern-social-media-master/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/ayush/Desktop/myProjects/mern-social-media-master/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/Users/ayush/Desktop/myProjects/mern-social-media-master/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState,useRef}from\"react\";// import UserCard from \"../UserCard\";\n// import AnanomUserCard from \"./AnanomUserCard\";\nimport{useDispatch,useSelector}from\"react-redux\";import{useParams}from\"react-router-dom\";// import { useParams } from \"react-router-dom\";\n// import { ToastContainer, toast } from \"react-toastify\";\nimport MsgDisplay from\"../../message/MsgDisplay\";import AnanomMsgDisplay from\"../AnanomMsgDisplay\";// import UserCard from \"../../UserCard\";\nimport AnanomMessageCard from\"./UserCard\";// import Icons from \"../Icons\";\n// import { GLOBALTYPES } from \"../../redux/actions/globalTypes\";\n// import { imageShow, videoShow } from \"../../utils/mediaShow\";\n// import { imageUpload } from \"../../utils/imageUpload\";\n// import EndChatModel from \"./EndChatModel\";\n// import {\n//   addMessage,\n//   getMessages,\n//   MESSAGE_TYPES,\n// } from \"../../redux/actions/saveConversation\";\n// import {\n//   addMessage,\n//   getMessages,\n//   MESSAGE_TYPES,\n// } from \"../../redux/actions/messageAction\";\n// import LoadIcon from \"../../images/loading.gif\";\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var AnanomUserChat=function AnanomUserChat(props){console.log(props);//   const googleId = props.receiverGoogleId;\n//   const ananomConversation = props.ananomConversation;\n//   const receieverSocketID = props.receieverSocketID;\n//   const id = props.id;\n//   const ownID = props.ownId;\nvar _useState=useState([]),_useState2=_slicedToArray(_useState,2),messages=_useState2[0],setMessages=_useState2[1];var _useSelector=useSelector(function(state){return state;}),auth=_useSelector.auth,message=_useSelector.message,ananomMessages=_useSelector.ananomMessages,theme=_useSelector.theme;var _useParams=useParams(),id=_useParams.id;//   const dispatch = useDispatch();\n//   const [incomingMessage, setIncomingMessage] = useState(null);\n//   const [text, setText] = useState(\"\");\n//   const [page, setPage] = useState(0);\n//   const [onEdit, setOnEdit] = useState(false);\n//   const [media, setMedia] = useState([]);\n//   const [loadMedia, setLoadMedia] = useState(false);\nconsole.log(messages);useEffect(function(){var getMessages=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return ananomMessages.conversation.map(function(user){console.log(user);if(user.id===id){console.log(user);setMessages(user.messages);}});case 2:case\"end\":return _context.stop();}}},_callee);}));return function getMessages(){return _ref.apply(this,arguments);};}();getMessages();// setMessages(props.messages);\n},[id]);console.log(messages);//   const refDisplay = useRef();\n//   const pageEnd = useRef();\n//   useEffect(() => {\n//     socket.on(\"getAnanomMessage\", (data) => {\n//       console.log(data);\n//       setIncomingMessage({\n//         sender: data.sender,\n//         receiverId: auth.user._id,\n//         text: data.text,\n//         media: data.media,\n//         createdAt: data.createdAt,\n//       });\n//     });\n//   }, [socket]);\n//   console.log(incomingMessage);\n//   useEffect(() => {\n//     const addmessage = async () => {\n//       if (incomingMessage) {\n//         setMessages((prev) => [...prev, incomingMessage]);\n//         await dispatch(addMessage({ message: incomingMessage }));\n//       }\n//     };\n//     addmessage();\n//   }, [incomingMessage]);\n//   const handleChangeMedia = (e) => {\n//     const files = [...e.target.files];\n//     let err = \"\";\n//     let newMedia = [];\n//     files.forEach((file) => {\n//       if (!file) {\n//         return (err = \"File does not exist.\");\n//       }\n//       if (file.size > 1024 * 1024 * 5) {\n//         return (err = \"Image size must be less than 5 mb.\");\n//       }\n//       return newMedia.push(file);\n//     });\n//     if (err) {\n//       dispatch({ type: GLOBALTYPES.ALERT, payload: { error: err } });\n//     }\n//     setMedia([...media, ...newMedia]);\n//   };\n//   const handleDeleteMedia = (index) => {\n//     const newArr = [...media];\n//     newArr.splice(index, 1);\n//     setMedia(newArr);\n//   };\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (!text.trim() && media.length === 0) return;\n//     setText(\"\");\n//     setMedia([]);\n//     setLoadMedia(true);\n//     let newArr = [];\n//     if (media.length > 0) newArr = await imageUpload(media);\n//     let message = {\n//       sender: auth.user._id,\n//       receiverId: googleId,\n//       text,\n//       media: newArr,\n//       createdAt: new Date().toISOString(),\n//     };\n//     console.log(ananomConversation);\n//     console.log(ownID);\n//     // ananomConversation?.members?.includes(ownID) &&\n//     setMessages((prev) => [...prev, message]);\n//     socket.emit(\"sendAnanomMessage\", message);\n//     setLoadMedia(false);\n//     await dispatch(addMessage({ message }));\n//     if (refDisplay.current) {\n//       refDisplay.current.scrollIntoView({\n//         behaviour: \"smooth\",\n//         block: \"end\",\n//       });\n//     }\n//   };\n//   useEffect(() => {\n//     if (refDisplay.current) {\n//       refDisplay.current.scrollIntoView({\n//         behaviour: \"smooth\",\n//         block: \"end\",\n//       });\n//     }\n//   }, [text]);\n//   useEffect(() => {\n//     if (incomingMessage) {\n//       refDisplay.current.scrollIntoView({\n//         behaviour: \"smooth\",\n//         block: \"end\",\n//       });\n//     }\n//   }, [incomingMessage]);\n//   console.log(googleId);\nreturn/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"message_header\"}),/*#__PURE__*/_jsx(\"div\",{className:\"chat_container\",style:{height:\"calc(100% - 180px)\"},children:messages.map(function(msg,index){return/*#__PURE__*/_jsxs(\"div\",{children:[msg.sender!==auth.user._id&&/*#__PURE__*/_jsx(\"div\",{className:\"chat_row other_message\",children:/*#__PURE__*/_jsx(AnanomMsgDisplay,{msg:msg,theme:theme})}),msg.sender===auth.user._id&&/*#__PURE__*/_jsx(\"div\",{className:\"chat_row you_message\",children:/*#__PURE__*/_jsx(MsgDisplay,{user:auth.user,msg:msg,theme:theme})})]},index);})})]});};export default AnanomUserChat;","map":{"version":3,"sources":["C:/Users/ayush/Desktop/myProjects/mern-social-media-master/client/src/components/AnanomousUser/saveAnanomMessages/RightSide.js"],"names":["React","useEffect","useState","useRef","useDispatch","useSelector","useParams","MsgDisplay","AnanomMsgDisplay","AnanomMessageCard","AnanomUserChat","props","console","log","messages","setMessages","state","auth","message","ananomMessages","theme","id","getMessages","conversation","map","user","height","msg","index","sender","_id"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\n// import UserCard from \"../UserCard\";\r\n// import AnanomUserCard from \"./AnanomUserCard\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\n// import { useParams } from \"react-router-dom\";\r\n// import { ToastContainer, toast } from \"react-toastify\";\r\nimport MsgDisplay from \"../../message/MsgDisplay\";\r\nimport AnanomMsgDisplay from \"../AnanomMsgDisplay\";\r\n// import UserCard from \"../../UserCard\";\r\nimport AnanomMessageCard from \"./UserCard\";\r\n// import Icons from \"../Icons\";\r\n// import { GLOBALTYPES } from \"../../redux/actions/globalTypes\";\r\n// import { imageShow, videoShow } from \"../../utils/mediaShow\";\r\n// import { imageUpload } from \"../../utils/imageUpload\";\r\n// import EndChatModel from \"./EndChatModel\";\r\n// import {\r\n//   addMessage,\r\n//   getMessages,\r\n//   MESSAGE_TYPES,\r\n// } from \"../../redux/actions/saveConversation\";\r\n\r\n// import {\r\n//   addMessage,\r\n//   getMessages,\r\n//   MESSAGE_TYPES,\r\n// } from \"../../redux/actions/messageAction\";\r\n// import LoadIcon from \"../../images/loading.gif\";\r\n\r\nconst AnanomUserChat = (props) => {\r\n  console.log(props);\r\n//   const googleId = props.receiverGoogleId;\r\n//   const ananomConversation = props.ananomConversation;\r\n//   const receieverSocketID = props.receieverSocketID;\r\n//   const id = props.id;\r\n//   const ownID = props.ownId;\r\n  const [messages, setMessages] = useState([]);\r\n  const { auth, message, ananomMessages, theme } = useSelector((state) => state);\r\n        const { id } = useParams();\r\n//   const dispatch = useDispatch();\r\n//   const [incomingMessage, setIncomingMessage] = useState(null);\r\n//   const [text, setText] = useState(\"\");\r\n//   const [page, setPage] = useState(0);\r\n//   const [onEdit, setOnEdit] = useState(false);\r\n//   const [media, setMedia] = useState([]);\r\n//   const [loadMedia, setLoadMedia] = useState(false);\r\n\r\n    console.log(messages);\r\n  useEffect(() => {\r\n    const getMessages = async () => {\r\n      await ananomMessages.conversation.map((user) => {\r\n        console.log(user)\r\n        if (user.id === id) {\r\n          console.log(user);\r\n          setMessages(user.messages);\r\n        }\r\n      });\r\n    }\r\n    getMessages();\r\n// setMessages(props.messages);\r\n  }, [id])\r\n  \r\n  console.log(messages)\r\n//   const refDisplay = useRef();\r\n//   const pageEnd = useRef();\r\n\r\n//   useEffect(() => {\r\n//     socket.on(\"getAnanomMessage\", (data) => {\r\n//       console.log(data);\r\n//       setIncomingMessage({\r\n//         sender: data.sender,\r\n//         receiverId: auth.user._id,\r\n//         text: data.text,\r\n//         media: data.media,\r\n//         createdAt: data.createdAt,\r\n//       });\r\n//     });\r\n//   }, [socket]);\r\n\r\n//   console.log(incomingMessage);\r\n\r\n//   useEffect(() => {\r\n//     const addmessage = async () => {\r\n//       if (incomingMessage) {\r\n//         setMessages((prev) => [...prev, incomingMessage]);\r\n//         await dispatch(addMessage({ message: incomingMessage }));\r\n//       }\r\n//     };\r\n//     addmessage();\r\n//   }, [incomingMessage]);\r\n\r\n//   const handleChangeMedia = (e) => {\r\n//     const files = [...e.target.files];\r\n//     let err = \"\";\r\n//     let newMedia = [];\r\n\r\n//     files.forEach((file) => {\r\n//       if (!file) {\r\n//         return (err = \"File does not exist.\");\r\n//       }\r\n//       if (file.size > 1024 * 1024 * 5) {\r\n//         return (err = \"Image size must be less than 5 mb.\");\r\n//       }\r\n//       return newMedia.push(file);\r\n//     });\r\n//     if (err) {\r\n//       dispatch({ type: GLOBALTYPES.ALERT, payload: { error: err } });\r\n//     }\r\n//     setMedia([...media, ...newMedia]);\r\n//   };\r\n\r\n//   const handleDeleteMedia = (index) => {\r\n//     const newArr = [...media];\r\n//     newArr.splice(index, 1);\r\n//     setMedia(newArr);\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     if (!text.trim() && media.length === 0) return;\r\n//     setText(\"\");\r\n//     setMedia([]);\r\n\r\n//     setLoadMedia(true);\r\n\r\n//     let newArr = [];\r\n//     if (media.length > 0) newArr = await imageUpload(media);\r\n\r\n//     let message = {\r\n//       sender: auth.user._id,\r\n//       receiverId: googleId,\r\n//       text,\r\n//       media: newArr,\r\n//       createdAt: new Date().toISOString(),\r\n//     };\r\n//     console.log(ananomConversation);\r\n//     console.log(ownID);\r\n//     // ananomConversation?.members?.includes(ownID) &&\r\n//     setMessages((prev) => [...prev, message]);\r\n//     socket.emit(\"sendAnanomMessage\", message);\r\n//     setLoadMedia(false);\r\n//     await dispatch(addMessage({ message }));\r\n//     if (refDisplay.current) {\r\n//       refDisplay.current.scrollIntoView({\r\n//         behaviour: \"smooth\",\r\n//         block: \"end\",\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     if (refDisplay.current) {\r\n//       refDisplay.current.scrollIntoView({\r\n//         behaviour: \"smooth\",\r\n//         block: \"end\",\r\n//       });\r\n//     }\r\n//   }, [text]);\r\n\r\n//   useEffect(() => {\r\n//     if (incomingMessage) {\r\n//       refDisplay.current.scrollIntoView({\r\n//         behaviour: \"smooth\",\r\n//         block: \"end\",\r\n//       });\r\n//     }\r\n//   }, [incomingMessage]);\r\n\r\n//   console.log(googleId);\r\n  return (\r\n    <>\r\n      <div className=\"message_header\">\r\n        {/* {user.length !== 0 && ( */}\r\n        {/* <AnanomUserCard\r\n          find={props.find}\r\n          setFind={props.setFind}\r\n          end={props.end}\r\n          setEnd={props.setEnd}\r\n          bcode={props.bcode}\r\n          setBcode={props.setBcode}\r\n          receiver={googleId}\r\n        >\r\n          <i className=\"fas fa-trash text-danger\" />\r\n        </AnanomUserCard> */}\r\n        {/* )} */}\r\n      </div>\r\n\r\n      <div className=\"chat_container\" style={{ height: \"calc(100% - 180px)\" }}>\r\n        {/* <div className=\"chat_display\" ref={refDisplay}> */}\r\n          {/* <button style={{ marginTop: \"-25px\", opacity: 0 }} ref={pageEnd}>\r\n            Load..\r\n          </button> */}\r\n\r\n          {messages.map((msg, index) => (\r\n            <div key={index}>\r\n              {msg.sender !== auth.user._id && (\r\n                <div className=\"chat_row other_message\">\r\n                  <AnanomMsgDisplay msg={msg} theme={theme} />\r\n                </div>\r\n              )}\r\n              {msg.sender === auth.user._id && (\r\n                <div className=\"chat_row you_message\">\r\n                  <MsgDisplay user={auth.user} msg={msg} theme={theme} />\r\n                </div>\r\n              )}\r\n            </div>\r\n          ))}\r\n          {/* {loadMedia && (\r\n            <div className=\"chat_row you_message\">\r\n              <img src={LoadIcon} alt=\"Loading...\" />\r\n            </div>\r\n          )} */}\r\n        {/* </div> */}\r\n      </div>\r\n\r\n      {/* <div\r\n        className=\"show_media\"\r\n        style={{ display: media.length > 0 ? \"\" : \"none\" }}\r\n      >\r\n        {media.map((item, index) => (\r\n          <div key={index} id=\"file_media\">\r\n            {item.type.match(/video/i)\r\n              ? videoShow(URL.createObjectURL(item), theme)\r\n              : imageShow(URL.createObjectURL(item), theme)}\r\n            <span onClick={() => handleDeleteMedia(index)}>&times;</span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <form className=\"chat_input\" onSubmit={handleSubmit}>\r\n        <input\r\n          placeholder=\"Type a message.\"\r\n          type=\"text\"\r\n          value={text}\r\n          onChange={(e) => setText(e.target.value)}\r\n          style={{\r\n            filter: theme ? \"invert(1)\" : \"invert(0)\",\r\n            background: theme ? \"#040404\" : \"\",\r\n            color: theme ? \"white\" : \"\",\r\n          }}\r\n        />\r\n        <Icons setContent={setText} content={text} theme={theme} />\r\n        <div className=\"file_upload\">\r\n          <i className=\"fas fa-image color-c1\" />\r\n          <input\r\n            type=\"file\"\r\n            name=\"file\"\r\n            id=\"file\"\r\n            multiple\r\n            accept=\"image/*,video/*\"\r\n            onChange={handleChangeMedia}\r\n          />\r\n        </div>\r\n        <button\r\n          type=\"submit\"\r\n          disabled={text || media.length > 0 ? false : true}\r\n          className=\"material-icons\"\r\n        >\r\n          near_me\r\n        </button>\r\n      </form>\r\n\r\n      {onEdit && (\r\n        <EndChatModel setOnEdit={setOnEdit} receiver={props.receiver} />\r\n      )} */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AnanomUserChat;\r\n"]},"metadata":{},"sourceType":"module"}